{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar TYPE_ERROR = 'type_error_expected';\n\nfunction constructErrors(value, error, options) {\n  if (options === void 0) {\n    options = {\n      message: undefined\n    };\n  }\n\n  return [{\n    value: value,\n    error: error,\n    message: typeof options.message === 'function' ? options.message(error, value) : options.message\n  }];\n}\n\nfunction getErrors(obj, validator, key) {\n  var value = key ? obj[key] : obj;\n  var path = key ? \"['\" + key + \"']\" : undefined;\n  var error = validator(value);\n\n  if (!error) {\n    return;\n  }\n\n  return error.map(function (o) {\n    return __assign({}, o, {\n      path: \"\" + (path || '') + (o.path || '') || undefined\n    });\n  });\n}\n\nfunction matchesBoolean(options) {\n  return function (value) {\n    return typeof value === 'boolean' ? undefined : constructErrors(value, TYPE_ERROR + \"_boolean\", options);\n  };\n}\n\nexports.matchesBoolean = matchesBoolean;\n\nfunction matchesString(options) {\n  return function (value) {\n    return typeof value === 'string' ? undefined : constructErrors(value, TYPE_ERROR + \"_string\", options);\n  };\n}\n\nexports.matchesString = matchesString;\n\nfunction matchesPositiveInteger(options) {\n  return function (value) {\n    return !Number.isInteger(value) || value < 0 ? constructErrors(value, TYPE_ERROR + \"_integer\", options) : undefined;\n  };\n}\n\nexports.matchesPositiveInteger = matchesPositiveInteger;\n\nfunction matchesPositiveNumber(options) {\n  return function (value) {\n    return Number.isNaN(value) || !Number.isFinite(value) || value < 0 ? constructErrors(value, TYPE_ERROR + \"_number\", options) : undefined;\n  };\n}\n\nexports.matchesPositiveNumber = matchesPositiveNumber;\n/**\n * Returns a validator that matches values in the given enum\n * @param type - enum to use for match values\n * @public\n */\n\nfunction matchesEnum(types, options) {\n  return function (value) {\n    var values = Object.keys(types).map(function (key) {\n      return types[key];\n    });\n    var message = options && options.message || \"expected:\" + values.map(function (val) {\n      return \"`\" + val + \"`\";\n    }).join(' or ');\n    return values.includes(value) ? undefined : constructErrors(value, 'invalid_enum_value', __assign({}, options, {\n      message: message\n    }));\n  };\n}\n\nexports.matchesEnum = matchesEnum;\n\nfunction matchesArray(validator, options) {\n  return function (value) {\n    if (!Array.isArray(value)) {\n      return constructErrors(value, TYPE_ERROR + \"_array\", options);\n    }\n\n    if (!validator) {\n      return;\n    }\n\n    var errors = [];\n    value.forEach(function (val, key) {\n      var objectError = validator(val);\n\n      if (objectError) {\n        errors = errors.concat(objectError.map(function (error) {\n          return __assign({}, error, {\n            path: \"['\" + key + \"']\" + (error.path || '')\n          });\n        }));\n      }\n    });\n    return errors.length ? errors : undefined;\n  };\n}\n\nexports.matchesArray = matchesArray;\n\nfunction matchesObject(schema, options) {\n  return function (val) {\n    if (typeof val !== 'object' || !val || Array.isArray(val)) {\n      return constructErrors(val, TYPE_ERROR + \"_object\", options);\n    }\n\n    var flattened = Object.keys(schema).reduce(function (acc, key) {\n      return acc.concat(getErrors(val, schema[key], key) || []);\n    }, []);\n    return flattened.length ? flattened : undefined;\n  };\n}\n\nexports.matchesObject = matchesObject;\n\nfunction makeOptional(validator) {\n  return function (value) {\n    if (value === undefined || value === null) {\n      return undefined;\n    }\n\n    return validator(value);\n  };\n}\n\nexports.makeOptional = makeOptional;\n\nfunction composeSchemas() {\n  var validators = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    validators[_i] = arguments[_i];\n  }\n\n  return function (val) {\n    var error;\n    var i = 0;\n    var len = validators.length;\n\n    while (!error && i < len) {\n      error = validators[i](val);\n\n      if (error) {\n        return error;\n      }\n\n      i++;\n    }\n  };\n}\n\nexports.composeSchemas = composeSchemas;\n\nfunction validate(obj, validator) {\n  return getErrors(obj, validator);\n}\n\nexports.validate = validate;","map":null,"metadata":{},"sourceType":"script"}
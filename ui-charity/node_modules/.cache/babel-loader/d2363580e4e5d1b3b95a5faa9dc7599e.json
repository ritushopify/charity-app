{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buttonHelper_1 = require(\"../buttonHelper\");\n\nvar helper_1 = require(\"../helper\");\n\nvar types_1 = require(\"../types\");\n\nvar types_2 = require(\"./types\");\n\nfunction update(group, component, props) {\n  return buttonActionWrapper(group, component, types_2.Action.UPDATE, props);\n}\n\nexports.update = update;\n\nfunction isGroupedButton(options) {\n  var castOptions = options;\n  return castOptions.buttons && castOptions.buttons.length > 0 && castOptions.label !== undefined;\n}\n\nexports.isGroupedButton = isGroupedButton;\n\nfunction isGroupedButtonPayload(payload) {\n  var castOptions = payload;\n  return Array.isArray(castOptions.buttons) && typeof castOptions.id === 'string' && typeof castOptions.label === 'string';\n}\n\nexports.isGroupedButtonPayload = isGroupedButtonPayload;\n\nvar ButtonGroup =\n/** @class */\nfunction (_super) {\n  __extends(ButtonGroup, _super);\n\n  function ButtonGroup(app, options) {\n    var _this = _super.call(this, app, types_1.ComponentType.ButtonGroup, types_1.Group.ButtonGroup) || this;\n\n    _this.disabled = false;\n    _this.buttonsOptions = [];\n    _this.buttons = [];\n\n    _this.set(options, false);\n\n    return _this;\n  }\n\n  Object.defineProperty(ButtonGroup.prototype, \"options\", {\n    get: function () {\n      return {\n        buttons: this.buttonsOptions,\n        disabled: this.disabled,\n        label: this.label\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ButtonGroup.prototype, \"payload\", {\n    get: function () {\n      return __assign({}, this.options, {\n        buttons: this.buttons,\n        id: this.id\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ButtonGroup.prototype.set = function (options, shouldUpdate) {\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var label = mergedOptions.label,\n        disabled = mergedOptions.disabled,\n        buttons = mergedOptions.buttons;\n    this.label = label;\n    this.disabled = !!disabled;\n    this.buttons = this.getButtons(buttons);\n\n    if (shouldUpdate) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  ButtonGroup.prototype.dispatch = function (action) {\n    switch (action) {\n      case types_2.Action.UPDATE:\n        var updateAction = update(this.group, this.component, this.payload);\n        this.app.dispatch(updateAction);\n        break;\n    }\n\n    return this;\n  };\n\n  ButtonGroup.prototype.updateButtons = function (newPayload) {\n    if (!this.buttons || this.buttons.length === 0) {\n      return;\n    }\n\n    var updated;\n\n    for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {\n      var action = _a[_i];\n      updated = helper_1.updateActionFromPayload(action, newPayload);\n\n      if (updated) {\n        break;\n      }\n    }\n\n    if (updated) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n  };\n\n  ButtonGroup.prototype.getSingleButton = function (button) {\n    return buttonHelper_1.getSingleButton(this, button, this.subgroups, this.updateButtons);\n  };\n\n  ButtonGroup.prototype.getButtons = function (buttonOptions) {\n    var _this = this;\n\n    var buttons = [];\n\n    if (!buttonOptions) {\n      return [];\n    }\n\n    buttonOptions.forEach(function (button) {\n      var singleButton = buttonHelper_1.getSingleButton(_this, button, _this.subgroups, _this.updateButtons);\n      buttons.push(singleButton);\n    });\n    this.buttonsOptions = buttonOptions;\n    return buttons;\n  };\n\n  return ButtonGroup;\n}(helper_1.ActionSetWithChildren);\n\nexports.ButtonGroup = ButtonGroup;\n\nfunction create(app, options) {\n  return new ButtonGroup(app, options);\n}\n\nexports.create = create;\n\nfunction buttonActionWrapper(group, component, eventName, props, payload) {\n  var id = component.id;\n  var label = props.label;\n  var action = helper_1.getEventNameSpace(group, eventName, component);\n\n  var buttonPayload = __assign({\n    id: id,\n    label: label\n  }, props, {\n    payload: payload\n  });\n\n  return helper_1.actionWrapper({\n    type: action,\n    group: group,\n    payload: buttonPayload\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
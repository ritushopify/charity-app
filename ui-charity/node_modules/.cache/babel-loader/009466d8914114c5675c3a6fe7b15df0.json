{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helper_1 = require(\"../helper\");\n\nvar types_1 = require(\"../types\");\n\nvar types_2 = require(\"./types\");\n\nfunction clickButton(group, component, payload) {\n  var id = component.id;\n  var action = helper_1.getEventNameSpace(group, types_2.Action.CLICK, component);\n  var buttonPayload = {\n    id: id,\n    payload: payload\n  };\n  return helper_1.actionWrapper({\n    type: action,\n    group: group,\n    payload: buttonPayload\n  });\n}\n\nexports.clickButton = clickButton;\n\nfunction update(group, component, props) {\n  var id = component.id;\n  var label = props.label;\n  var action = helper_1.getEventNameSpace(group, types_2.Action.UPDATE, component);\n\n  var buttonPayload = __assign({\n    id: id,\n    label: label\n  }, props);\n\n  return helper_1.actionWrapper({\n    type: action,\n    group: group,\n    payload: buttonPayload\n  });\n}\n\nexports.update = update;\n\nfunction isValidButtonProps(button) {\n  return typeof button.id === 'string' && typeof button.label === 'string';\n}\n\nexports.isValidButtonProps = isValidButtonProps;\n\nvar Button =\n/** @class */\nfunction (_super) {\n  __extends(Button, _super);\n\n  function Button(app, options) {\n    var _this = _super.call(this, app, types_1.ComponentType.Button, types_1.Group.Button) || this;\n\n    _this.disabled = false;\n\n    _this.set(options, false);\n\n    return _this;\n  }\n\n  Object.defineProperty(Button.prototype, \"options\", {\n    get: function () {\n      return {\n        disabled: this.disabled,\n        icon: this.icon,\n        label: this.label,\n        style: this.style\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"payload\", {\n    get: function () {\n      return __assign({\n        id: this.id\n      }, this.options);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Button.prototype.set = function (options, shouldUpdate) {\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var label = mergedOptions.label,\n        disabled = mergedOptions.disabled,\n        icon = mergedOptions.icon,\n        style = mergedOptions.style;\n    this.label = label;\n    this.disabled = !!disabled;\n    this.icon = icon;\n    this.style = style;\n\n    if (shouldUpdate) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  Button.prototype.dispatch = function (action, payload) {\n    switch (action) {\n      case types_2.Action.CLICK:\n        this.app.dispatch(clickButton(this.group, this.component, payload));\n        break;\n\n      case types_2.Action.UPDATE:\n        var updateAction = update(this.group, this.component, this.payload);\n        this.app.dispatch(updateAction);\n        break;\n    }\n\n    return this;\n  };\n\n  return Button;\n}(helper_1.ActionSet);\n\nexports.Button = Button;\n\nfunction create(app, options) {\n  return new Button(app, options);\n}\n\nexports.create = create;","map":null,"metadata":{},"sourceType":"script"}
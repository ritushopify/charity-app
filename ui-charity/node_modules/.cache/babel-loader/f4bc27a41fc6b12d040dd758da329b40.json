{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"../actions/Error\");\n\nvar types_1 = require(\"../client/types\");\n\nvar collection_1 = require(\"../util/collection\");\n\nvar constants_1 = require(\"./constants\");\n\nvar merge_1 = __importDefault(require(\"./merge\"));\n\nvar types_2 = require(\"./types\");\n\nvar constants_2 = require(\"./constants\");\n\nvar uuid_1 = __importDefault(require(\"./uuid\"));\n\nvar packageJson = require('../package.json');\n\nfunction actionWrapper(action) {\n  return __assign({}, action, {\n    version: getVersion(),\n    clientInterface: {\n      name: packageJson.name,\n      version: getVersion()\n    }\n  });\n}\n\nexports.actionWrapper = actionWrapper;\n\nfunction getVersion() {\n  return packageJson.version;\n}\n\nexports.getVersion = getVersion;\n/**\n * Returns full event name with prefix, group, subgroups and type formatted with separators\n * @internal\n * */\n\nfunction getEventNameSpace(group, eventName, component) {\n  var eventNameSpace = groupToEventNameSpace(group);\n\n  if (component) {\n    var subgroups_1 = component.subgroups,\n        type = component.type;\n\n    if (subgroups_1 && subgroups_1.length > 0) {\n      eventNameSpace += eventNameSpace.length > 0 ? constants_2.SEPARATOR : '';\n      subgroups_1.forEach(function (subgroup, index) {\n        eventNameSpace += \"\" + subgroup.toUpperCase() + (index < subgroups_1.length - 1 ? constants_2.SEPARATOR : '');\n      });\n    }\n\n    if (type !== group && type) {\n      eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_2.SEPARATOR : '') + type.toUpperCase();\n    }\n  }\n\n  if (eventNameSpace) {\n    eventNameSpace += \"\" + (eventNameSpace.length > 0 ? constants_2.SEPARATOR : '') + eventName.toUpperCase();\n  }\n\n  return \"\" + constants_1.PREFIX + constants_2.SEPARATOR + eventNameSpace;\n}\n\nexports.getEventNameSpace = getEventNameSpace;\n\nfunction isValidOptionalNumber(value) {\n  return value === null || value === undefined || typeof value === 'number';\n}\n\nexports.isValidOptionalNumber = isValidOptionalNumber;\n\nfunction isValidOptionalString(value) {\n  return value === null || value === undefined || typeof value === 'string';\n}\n\nexports.isValidOptionalString = isValidOptionalString;\n\nvar ActionSet =\n/** @class */\nfunction () {\n  function ActionSet(app, type, group, id) {\n    var _this = this;\n\n    this.app = app;\n    this.type = type;\n    this.group = group;\n    this.subgroups = [];\n    this.subscriptions = [];\n\n    if (!app) {\n      Error_1.throwError(Error_1.ActionType.INVALID_OPTIONS, 'Missing required `app`');\n    }\n\n    this.id = id || uuid_1.default();\n    this.defaultGroup = group;\n    var defaultSet = this.set;\n\n    this.set = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _a;\n\n      if (!_this.app.hooks) {\n        return defaultSet.apply(_this, args);\n      }\n\n      return (_a = _this.app.hooks).run.apply(_a, [types_1.LifecycleHook.UpdateAction, defaultSet, _this].concat(args));\n    };\n  }\n\n  ActionSet.prototype.set = function () {\n    var _ = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _[_i] = arguments[_i];\n    }\n  };\n\n  Object.defineProperty(ActionSet.prototype, \"component\", {\n    get: function () {\n      return {\n        id: this.id,\n        subgroups: this.subgroups,\n        type: this.type\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ActionSet.prototype.updateSubscription = function (subscriptionToRemove, group, subgroups) {\n    var eventType = subscriptionToRemove.eventType,\n        callback = subscriptionToRemove.callback,\n        component = subscriptionToRemove.component;\n    var currentIndex;\n    currentIndex = this.subscriptions.findIndex(function (subscription) {\n      return subscription === subscriptionToRemove;\n    });\n\n    if (currentIndex >= 0) {\n      this.subscriptions[currentIndex].unsubscribe();\n    } else {\n      currentIndex = undefined;\n    }\n\n    this.group = group;\n    this.subgroups = subgroups;\n    Object.assign(component, {\n      subgroups: this.subgroups\n    });\n    return this.subscribe(eventType, callback, component, currentIndex);\n  };\n\n  ActionSet.prototype.error = function (callback) {\n    var _this = this;\n\n    var subscriptionIndices = [];\n    forEachInEnum(Error_1.Action, function (eventNameSpace) {\n      // Keep track of subscription index so we can call unsubscribe later\n      // This ensure it will continue to work even when the subscription has been updated\n      subscriptionIndices.push(_this.subscriptions.length);\n\n      _this.subscribe(eventNameSpace, callback);\n    });\n    return function () {\n      var subscriptionsToRemove = subscriptionIndices.map(function (index) {\n        return _this.subscriptions[index];\n      });\n      subscriptionsToRemove.forEach(function (toRemove) {\n        collection_1.removeFromCollection(_this.subscriptions, toRemove, function (removed) {\n          removed.unsubscribe();\n        });\n      });\n    };\n  };\n\n  ActionSet.prototype.subscribe = function (eventName, callback, component, currentIndex) {\n    var _this = this;\n\n    var eventComponent = component || this.component;\n    var eventType = eventName.toUpperCase();\n    var boundedCallback = typeof currentIndex === 'number' ? callback : callback.bind(this);\n    var eventNameSpace;\n\n    if (Error_1.isErrorEventName(eventName)) {\n      eventNameSpace = getEventNameSpace(types_2.Group.Error, eventName, __assign({}, eventComponent, {\n        type: ''\n      }));\n    } else {\n      eventNameSpace = getEventNameSpace(this.group, eventName, eventComponent);\n    }\n\n    var unsubscribe = this.app.subscribe(eventNameSpace, boundedCallback, component ? component.id : this.id);\n    var subscription = {\n      eventType: eventType,\n      unsubscribe: unsubscribe,\n      callback: boundedCallback,\n      component: eventComponent,\n      updateSubscribe: function (group, subgroups) {\n        return _this.updateSubscription.call(_this, subscription, group, subgroups);\n      }\n    };\n\n    if (typeof currentIndex === 'number' && currentIndex >= 0 && currentIndex < this.subscriptions.length) {\n      this.subscriptions[currentIndex] = subscription;\n    } else {\n      this.subscriptions.push(subscription);\n    }\n\n    return unsubscribe;\n  };\n\n  ActionSet.prototype.unsubscribe = function (resetOnly) {\n    if (resetOnly === void 0) {\n      resetOnly = false;\n    }\n\n    unsubscribeActions(this.subscriptions, this.defaultGroup, resetOnly);\n    return this;\n  };\n\n  return ActionSet;\n}();\n\nexports.ActionSet = ActionSet;\n\nvar ActionSetWithChildren =\n/** @class */\nfunction (_super) {\n  __extends(ActionSetWithChildren, _super);\n\n  function ActionSetWithChildren() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.children = [];\n    return _this;\n  }\n\n  ActionSetWithChildren.prototype.unsubscribe = function (unsubscribeChildren, resetParentOnly) {\n    if (unsubscribeChildren === void 0) {\n      unsubscribeChildren = true;\n    }\n\n    if (resetParentOnly === void 0) {\n      resetParentOnly = false;\n    }\n\n    unsubscribeActions(this.subscriptions, this.defaultGroup, resetParentOnly);\n    this.children.forEach(function (child) {\n      if (ActionSetWithChildren.prototype.isPrototypeOf(child)) {\n        child.unsubscribe(unsubscribeChildren, unsubscribeChildren ? false : true);\n      } else {\n        child.unsubscribe(unsubscribeChildren ? false : true);\n      }\n    });\n    return this;\n  };\n\n  ActionSetWithChildren.prototype.getChild = function (id) {\n    var childIndex = this.children.findIndex(function (child) {\n      return child.id === id;\n    });\n    return childIndex >= 0 ? this.children[childIndex] : undefined;\n  };\n\n  ActionSetWithChildren.prototype.getChildIndex = function (id) {\n    return this.children.findIndex(function (child) {\n      return child.id === id;\n    });\n  };\n\n  ActionSetWithChildren.prototype.getChildSubscriptions = function (id, eventType) {\n    return this.subscriptions.filter(function (sub) {\n      return sub.component.id === id && (!eventType || eventType === sub.eventType);\n    });\n  };\n\n  ActionSetWithChildren.prototype.addChild = function (child, group, subgroups) {\n    var _this = this;\n\n    var subscriptions = child.subscriptions;\n    var existingChild = this.getChild(child.id); // Add child if it doesn't already exist\n\n    if (!existingChild) {\n      this.children.push(child);\n    }\n\n    if (!subscriptions || group === child.group && subgroups === child.subgroups) {\n      return this;\n    }\n\n    subscriptions.forEach(function (subscription) {\n      var updateSubscribe = subscription.updateSubscribe;\n      updateSubscribe(group, subgroups);\n    }); // Update child's group and subgroups\n\n    Object.assign(child, {\n      group: group,\n      subgroups: subgroups\n    }); // Update child's children subscriptions\n\n    if (ActionSetWithChildren.prototype.isPrototypeOf(child)) {\n      child.children.forEach(function (c) {\n        return _this.addChild(c, group, subgroups);\n      });\n    }\n\n    return this;\n  };\n\n  ActionSetWithChildren.prototype.removeChild = function (id) {\n    var _this = this;\n\n    collection_1.removeFromCollection(this.children, this.getChild(id), function () {\n      var toBeRemoved = _this.subscriptions.filter(function (subs) {\n        return subs.component.id === id;\n      });\n\n      toBeRemoved.forEach(function (toRemove) {\n        collection_1.removeFromCollection(_this.subscriptions, toRemove, function (removed) {\n          removed.unsubscribe();\n        });\n      });\n    });\n    return this;\n  };\n\n  ActionSetWithChildren.prototype.subscribeToChild = function (child, eventName, callback) {\n    var _this = this;\n\n    var boundedCallback = callback.bind(this);\n\n    if (eventName instanceof Array) {\n      eventName.forEach(function (e) {\n        return _this.subscribeToChild(child, e, callback);\n      });\n      return this;\n    }\n\n    if (typeof eventName !== 'string') {\n      return this;\n    }\n\n    var eventType = eventName.toUpperCase();\n    var currentSubscriptions = this.getChildSubscriptions(child.id, eventType);\n\n    if (currentSubscriptions.length > 0) {\n      // Subscription is already there, simply update it\n      currentSubscriptions.forEach(function (subs) {\n        return subs.updateSubscribe(_this.group, child.subgroups);\n      });\n    } else {\n      var childComponent = {\n        id: child.id,\n        subgroups: child.subgroups,\n        type: child.type\n      };\n      this.subscribe(eventType, boundedCallback, childComponent);\n    }\n\n    return this;\n  };\n\n  ActionSetWithChildren.prototype.getUpdatedChildActions = function (newActions, currentActions) {\n    if (newActions.length === 0) {\n      while (currentActions.length > 0) {\n        var action = currentActions.pop();\n\n        if (!action) {\n          break;\n        }\n\n        this.removeChild(action.id);\n      }\n\n      return undefined;\n    } // Only allow unique actions\n\n\n    var uniqueActions = newActions.filter(function (action, index, actionsArr) {\n      return index === actionsArr.indexOf(action);\n    });\n    var newActionIds = uniqueActions.map(function (action) {\n      return action.id;\n    }); // Remove unused actions\n\n    var unusedActions = currentActions.filter(function (action) {\n      return newActionIds.indexOf(action.id) < 0;\n    });\n\n    while (unusedActions.length > 0) {\n      var action = unusedActions.pop();\n\n      if (!action) {\n        break;\n      }\n\n      this.removeChild(action.id);\n    }\n\n    return uniqueActions;\n  };\n\n  return ActionSetWithChildren;\n}(ActionSet);\n\nexports.ActionSetWithChildren = ActionSetWithChildren;\n\nfunction unsubscribeActions(subscriptions, defaultGroup, reassign) {\n  if (reassign === void 0) {\n    reassign = false;\n  }\n\n  subscriptions.forEach(function (subscription) {\n    if (reassign) {\n      var updateSubscribe = subscription.updateSubscribe; // TODO: Support cases where we don't wipe out group and subgroups to defaults\n\n      updateSubscribe(defaultGroup, []);\n    } else {\n      var unsubscribe = subscription.unsubscribe;\n      unsubscribe();\n    }\n  });\n\n  if (!reassign) {\n    subscriptions.length = 0;\n  }\n}\n\nfunction updateActionFromPayload(action, newProps) {\n  var id = action.id;\n\n  if (id === newProps.id) {\n    // Merge new properties\n    Object.assign(action, getMergedProps(action, newProps));\n    return true;\n  }\n\n  return false;\n}\n\nexports.updateActionFromPayload = updateActionFromPayload;\n\nfunction getMergedProps(props, newProps) {\n  var merged = merge_1.default(props, newProps);\n\n  if (!merged) {\n    // tslint:disable-next-line:prefer-object-spread\n    var cloned = Object.assign(props, newProps);\n    return cloned;\n  }\n\n  return merged;\n}\n\nexports.getMergedProps = getMergedProps;\n\nfunction forEachInEnum(types, callback) {\n  Object.keys(types).forEach(function (key) {\n    callback(types[key]);\n  });\n}\n\nexports.forEachInEnum = forEachInEnum;\n\nfunction findMatchInEnum(types, lookup) {\n  var match = Object.keys(types).find(function (key) {\n    return lookup === types[key];\n  });\n  return match ? types[match] : undefined;\n}\n\nexports.findMatchInEnum = findMatchInEnum;\n\nfunction camelCaseToSnakeCase(value) {\n  return value.replace(/([A-Z])/g, function (matcher, _val, index) {\n    return \"\" + (index !== 0 ? '_' : '') + matcher[0].toLowerCase();\n  });\n}\n/**\n * Maps the group name to its event name\n * @internal\n * @remarks - This method is necessary for the new pattern of using snake case\n * which makes it more readable and easier to reconstruct the group from an event name.\n * Example: `ContextualSaveBar` becomes `CONTEXTUAL_SAVE_BAR`\n * */\n\n\nfunction groupToEventNameSpace(group) {\n  switch (group) {\n    case types_2.Group.ContextualSaveBar:\n      return camelCaseToSnakeCase(group).toUpperCase();\n\n    default:\n      return group.toUpperCase();\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
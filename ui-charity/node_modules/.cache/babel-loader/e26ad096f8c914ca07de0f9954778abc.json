{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar actions_1 = require(\"../../actions\");\n\nvar Button_1 = require(\"../../actions/Button\");\n\nvar type_validate_1 = require(\"../type-validate\");\n\nvar utils_1 = require(\"../utils\");\n\nvar button_1 = require(\"./button\");\n\nvar buttonSchemaWithId = type_validate_1.composeSchemas(button_1.buttonSchema, type_validate_1.matchesObject({\n  id: type_validate_1.matchesString()\n}));\n\nfunction getNavigationMenuSchema(props, isPayload) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (isPayload === void 0) {\n    isPayload = false;\n  }\n\n  var activeValidator = isPayload ? type_validate_1.matchesString() : buttonSchemaWithId;\n  var baseSchema = type_validate_1.matchesObject({\n    items: type_validate_1.makeOptional(type_validate_1.matchesArray(buttonSchemaWithId)),\n    active: type_validate_1.makeOptional(activeValidator)\n  });\n  var items = props.items,\n      active = props.active;\n\n  if (items && active) {\n    var activeItemSchema = type_validate_1.matchesObject({\n      active: type_validate_1.composeSchemas(activeValidator, function (value) {\n        return items.find(function (item) {\n          return isPayload ? item.id === value : item.id === value.id;\n        }) ? undefined : [{\n          error: 'invalid_active_item',\n          value: value,\n          message: 'expected active item to exist in menu items'\n        }];\n      })\n    });\n    return type_validate_1.composeSchemas(baseSchema, activeItemSchema);\n  }\n\n  return baseSchema;\n}\n\nfunction validateProps(props) {\n  return type_validate_1.validate(props, getNavigationMenuSchema(props));\n}\n\nexports.validateProps = validateProps;\n\nfunction validateAction(action) {\n  var schema = getNavigationMenuSchema(action.payload, true);\n\n  switch (action.type) {\n    default:\n    case actions_1.NavigationMenu.ActionType.UPDATE:\n      return type_validate_1.validate(action, utils_1.createActionValidator(actions_1.NavigationMenu.ActionType, schema, true, false));\n\n    case actions_1.NavigationMenu.ActionType.BUTTON_CLICK:\n      return button_1.validateAction(__assign({}, action, {\n        type: Button_1.ActionType.CLICK\n      }));\n\n    case actions_1.NavigationMenu.ActionType.BUTTON_UPDATE:\n      return button_1.validateAction(__assign({}, action, {\n        type: Button_1.ActionType.UPDATE\n      }));\n  }\n}\n\nexports.validateAction = validateAction;","map":null,"metadata":{},"sourceType":"script"}
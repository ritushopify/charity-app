{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helper_1 = require(\"../helper\");\n\nvar types_1 = require(\"../types\");\n\nvar types_2 = require(\"./types\");\n\nfunction errorActionWrapperWithId(type, action, message) {\n  var castPayload = action.payload;\n  return helper_1.actionWrapper({\n    type: type,\n    group: types_1.Group.Error,\n    payload: {\n      action: action,\n      message: message,\n      type: type,\n      id: castPayload && castPayload.id ? castPayload.id : undefined\n    }\n  });\n}\n\nvar Message;\n\n(function (Message) {\n  Message[\"MISSING_PAYLOAD\"] = \"Missing payload\";\n  Message[\"INVALID_PAYLOAD_ID\"] = \"Id in payload is missing or invalid\";\n})(Message = exports.Message || (exports.Message = {}));\n\nfunction invalidPayload(action, message) {\n  return errorActionWrapperWithId(types_2.ActionType.INVALID_PAYLOAD, action, message || \"The action's payload is missing required properties or has invalid properties\");\n}\n\nexports.invalidPayload = invalidPayload;\n\nfunction invalidActionType(action, message) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Error,\n    payload: {\n      action: action,\n      message: message || 'The action type is invalid or unsupported',\n      type: types_2.ActionType.INVALID_ACTION_TYPE\n    },\n    type: types_2.ActionType.INVALID_ACTION_TYPE\n  });\n}\n\nexports.invalidActionType = invalidActionType;\n\nfunction invalidAction(action, message) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Error,\n    payload: {\n      action: action,\n      message: message || \"The action's has missing/invalid values for `group`, `type` or `version`\",\n      type: types_2.ActionType.INVALID_ACTION\n    },\n    type: types_2.ActionType.INVALID_ACTION\n  });\n}\n\nexports.invalidAction = invalidAction;\n\nfunction unexpectedAction(action, message) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Error,\n    payload: {\n      action: action,\n      message: message || 'Action cannot be called at this time',\n      type: types_2.ActionType.UNEXPECTED_ACTION\n    },\n    type: types_2.ActionType.UNEXPECTED_ACTION\n  });\n}\n\nexports.unexpectedAction = unexpectedAction;\n\nfunction unsupportedOperationAction(action, message) {\n  return errorActionWrapperWithId(types_2.ActionType.UNSUPPORTED_OPERATION, action, message || 'The action type is unsupported');\n}\n\nexports.unsupportedOperationAction = unsupportedOperationAction;\n\nfunction persistenceAction(action, message) {\n  return errorActionWrapperWithId(types_2.ActionType.PERSISTENCE, action, message || 'Action cannot be persisted on server');\n}\n\nexports.persistenceAction = persistenceAction;\n\nfunction networkAction(action, message) {\n  return errorActionWrapperWithId(types_2.ActionType.NETWORK, action, message || 'Network error');\n}\n\nexports.networkAction = networkAction;\n\nfunction permissionAction(action, message) {\n  return errorActionWrapperWithId(types_2.ActionType.PERMISSION, action, message || 'Action is not permitted');\n}\n\nexports.permissionAction = permissionAction;\n\nfunction isErrorEventName(eventName) {\n  var match = helper_1.findMatchInEnum(types_2.Action, eventName);\n  return typeof match === 'string';\n}\n\nexports.isErrorEventName = isErrorEventName;\n\nvar AppBridgeError =\n/** @class */\nfunction () {\n  function AppBridgeError(message) {\n    this.name = 'AppBridgeError';\n    this.message = message;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(this.message).stack;\n    }\n  }\n\n  return AppBridgeError;\n}();\n\nexports.AppBridgeError = AppBridgeError;\nAppBridgeError.prototype = Object.create(Error.prototype);\n\nfunction fromAction(message, type, action) {\n  var errorMessage = message ? type + \": \" + message : type;\n  var error = new AppBridgeError(errorMessage);\n  error.action = action;\n  error.type = type;\n  return error;\n}\n\nexports.fromAction = fromAction;\n\nfunction throwError() {\n  var type = arguments[0];\n  var message;\n  var action;\n\n  if (typeof arguments[1] === 'string') {\n    message = arguments[1];\n  } else {\n    action = arguments[1];\n    message = arguments[2] || '';\n  }\n\n  throw fromAction(message, type, action);\n}\n\nexports.throwError = throwError;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Error_1 = require(\"./actions/Error\");\n\nvar validator_1 = require(\"./actions/validator\");\n\nvar collection_1 = require(\"./util/collection\");\n\nvar env_1 = require(\"./util/env\");\n\nvar Context;\n\n(function (Context) {\n  Context[\"Modal\"] = \"Modal\";\n  Context[\"Main\"] = \"Main\";\n})(Context = exports.Context || (exports.Context = {}));\n/**\n * Create a MessageTransport from an IFrame.\n * @remarks\n * Used on the host-side to create a postMessage MessageTransport.\n * @beta\n */\n\n\nfunction fromFrame(frame, localOrigin, context) {\n  var handlers = [];\n\n  if (typeof frame === 'undefined' || !frame.ownerDocument || !frame.ownerDocument.defaultView) {\n    throw Error_1.fromAction('App frame is undefined', Error_1.AppActionType.WINDOW_UNDEFINED);\n  }\n\n  var parent = frame.ownerDocument.defaultView;\n  parent.addEventListener('message', function (event) {\n    if (event.origin !== localOrigin || !validator_1.isAppMessage(event)) {\n      return;\n    }\n\n    for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\n      var handler = handlers_1[_i];\n      handler(event);\n    }\n  });\n  return {\n    context: context,\n    localOrigin: localOrigin,\n    frameWindow: frame.contentWindow,\n    hostFrame: parent,\n    dispatch: function (message) {\n      var contentWindow = frame.contentWindow;\n\n      if (contentWindow) {\n        contentWindow.postMessage(message, '*');\n      }\n    },\n    subscribe: function (handler) {\n      return collection_1.addAndRemoveFromCollection(handlers, handler);\n    }\n  };\n}\n\nexports.fromFrame = fromFrame;\n/**\n * Create a MessageTransport from a parent window.\n * @remarks\n * Used on the client-side to create a postMessage MessageTransport.\n * @internalremarks\n * In frameless mode, message should be dispatched via SmartWebView.handleMessage instead of postMessage.\n * @beta\n */\n\nfunction fromWindow(contentWindow, localOrigin) {\n  var handlers = [];\n\n  if (typeof window !== undefined) {\n    window.addEventListener('message', function (event) {\n      if (window === contentWindow && !env_1.isFrameless || event.source !== contentWindow || !(validator_1.isAppBridgeAction(event.data.payload) || validator_1.isAppMessage(event))) {\n        return;\n      }\n\n      for (var _i = 0, handlers_2 = handlers; _i < handlers_2.length; _i++) {\n        var handler = handlers_2[_i];\n        handler(event);\n      }\n    });\n  }\n\n  return {\n    localOrigin: localOrigin,\n    hostFrame: contentWindow,\n    dispatch: function (message) {\n      if (!message.source || !message.source.shopOrigin) {\n        return;\n      }\n\n      if (env_1.isFrameless && window && window.SmartWebView) {\n        window.SmartWebView.handleMessage('frameless://fromClient', JSON.stringify(message));\n        return;\n      }\n\n      var messageOrigin = \"https://\" + message.source.shopOrigin;\n      contentWindow.postMessage(message, messageOrigin);\n    },\n    subscribe: function (handler) {\n      return collection_1.addAndRemoveFromCollection(handlers, handler);\n    }\n  };\n}\n\nexports.fromWindow = fromWindow;","map":null,"metadata":{},"sourceType":"script"}
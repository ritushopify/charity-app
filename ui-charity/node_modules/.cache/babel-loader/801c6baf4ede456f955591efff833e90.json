{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar FILE_URI_MATCH = /\\/\\/\\//;\nvar INVALID_RELATIVE_URL = /[/\\\\][/\\\\]/;\nvar VALID_PROTOCOLS = ['https:', 'http:'];\nvar DUMMY_HOSTNAME = 'http://test.com';\n\nfunction isSafe(redirectUrl, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.whitelist,\n      whitelist = _c === void 0 ? [] : _c,\n      _d = _b.subdomains,\n      subdomains = _d === void 0 ? [] : _d,\n      matchPath = _b.matchPath,\n      requireAbsolute = _b.requireAbsolute,\n      requireSSL = _b.requireSSL;\n\n  if (FILE_URI_MATCH.test(redirectUrl)) {\n    return false;\n  }\n\n  if (redirectUrl.startsWith('/')) {\n    if (whitelist.length > 0 || subdomains.length > 0 || requireAbsolute || requireSSL) {\n      return false;\n    }\n\n    if (matchPath) {\n      // Creating a new URL expands the pathname in case of things like `/a/../b`\n      return pathMatches(new URL(redirectUrl, DUMMY_HOSTNAME), redirectUrl, matchPath);\n    }\n\n    return !INVALID_RELATIVE_URL.test(redirectUrl);\n  }\n\n  var url;\n\n  try {\n    url = new URL(redirectUrl);\n  } catch (error) {\n    return false;\n  }\n\n  if (!VALID_PROTOCOLS.includes(url.protocol)) {\n    return false;\n  }\n\n  if (requireSSL && url.protocol !== 'https:') {\n    return false;\n  }\n\n  if (url.username || url.password) {\n    return false;\n  }\n\n  if (matchPath && !pathMatches(url, redirectUrl, matchPath)) {\n    return false;\n  }\n\n  if (!hostIsValid(url, whitelist, subdomains)) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isSafe = isSafe;\n\nfunction hostIsValid(url, whitelist, subdomains) {\n  if (!subdomains.every(function (subdomain) {\n    return subdomain.startsWith('.');\n  })) {\n    throw new TypeError('Subdomains must begin with .');\n  }\n\n  var hostname = url.hostname;\n  return whitelist.length === 0 && subdomains.length === 0 || whitelist.includes(hostname) || subdomains.some(function (subdomain) {\n    return hostname.endsWith(subdomain);\n  });\n}\n\nfunction pathMatches(url, originalUrl, matcher) {\n  var pathname = url.pathname; // Gets just the unresolve pathname, i.e., `http://foo.com/a/../b => /a/../b\n\n  var originalPathname = originalUrl.replace(url.origin, '').split('?')[0];\n  return typeof matcher === 'string' ? pathname === matcher && originalPathname === matcher : matcher.test(pathname) && matcher.test(originalPathname);\n}\n\nfunction makeSafe(url, fallback, options) {\n  return isSafe(url, options) ? encodeURI(url) : fallback;\n}\n\nexports.makeSafe = makeSafe;","map":null,"metadata":{},"sourceType":"script"}
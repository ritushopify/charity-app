"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var network_1 = require("@shopify/network");
var ServerCookieManager_1 = require("./ServerCookieManager");
var context_1 = require("./context");
exports.NetworkContext = context_1.NetworkContext;
exports.EFFECT_ID = Symbol('network');
var NetworkManager = /** @class */ (function () {
    function NetworkManager(_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, headers = _b.headers, cookies = _b.cookies;
        this.effect = {
            id: exports.EFFECT_ID,
            afterEachPass: function () {
                return _this.redirectUrl == null;
            },
            betweenEachPass: function () {
                _this.reset();
            },
        };
        this.statusCodes = [];
        this.csp = new Map();
        this.headers = new Map();
        this.requestHeaders = normalizeHeaders(headers);
        this.cookies = new ServerCookieManager_1.ServerCookieManager(cookies);
    }
    NetworkManager.prototype.reset = function () {
        this.statusCodes = [];
        this.csp.clear();
        this.headers.clear();
        this.cookies.clear();
        this.redirectUrl = undefined;
    };
    NetworkManager.prototype.getHeader = function (header) {
        return this.requestHeaders[header.toLowerCase()];
    };
    NetworkManager.prototype.setHeader = function (header, value) {
        this.headers.set(header, value);
    };
    NetworkManager.prototype.redirectTo = function (url, status) {
        if (status === void 0) { status = network_1.StatusCode.Found; }
        this.addStatusCode(status);
        this.redirectUrl = url;
    };
    NetworkManager.prototype.addStatusCode = function (statusCode) {
        this.statusCodes.push(statusCode);
    };
    NetworkManager.prototype.addCspDirective = function (directive, value) {
        var normalizedValue = typeof value === 'string' ? [value] : value;
        var currentValue = this.csp.get(directive) || [];
        var normalizedCurrentValue = Array.isArray(currentValue)
            ? currentValue
            : [String(currentValue)];
        var newValue = Array.isArray(normalizedValue)
            ? tslib_1.__spread(normalizedCurrentValue, normalizedValue) : normalizedValue;
        this.csp.set(directive, newValue);
    };
    NetworkManager.prototype.extract = function () {
        var csp = this.csp.size === 0
            ? undefined
            : tslib_1.__spread(this.csp).map(function (_a) {
                var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                var printedValue;
                if (typeof value === 'boolean') {
                    printedValue = '';
                }
                else if (typeof value === 'string') {
                    printedValue = value;
                }
                else {
                    printedValue = value.join(' ');
                }
                return "" + key + (printedValue ? ' ' : '') + printedValue;
            })
                .join('; ');
        var headers = new Map(this.headers);
        if (csp) {
            headers.set(network_1.Header.ContentSecurityPolicy, csp);
        }
        return {
            status: this.statusCodes.length > 0
                ? this.statusCodes.reduce(function (large, code) { return Math.max(large, code); }, 0)
                : undefined,
            headers: headers,
            cookies: this.cookies.getCookies(),
            redirectUrl: this.redirectUrl,
        };
    };
    return NetworkManager;
}());
exports.NetworkManager = NetworkManager;
function normalizeHeaders(headers) {
    if (!headers) {
        return {};
    }
    return Object.entries(headers).reduce(function (accumulator, _a) {
        var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
        accumulator[key.toLowerCase()] = value;
        return accumulator;
    }, {});
}

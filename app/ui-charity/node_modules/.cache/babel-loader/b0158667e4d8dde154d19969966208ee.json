{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Weekdays;\n\n(function (Weekdays) {\n  Weekdays[Weekdays[\"Sunday\"] = 0] = \"Sunday\";\n  Weekdays[Weekdays[\"Monday\"] = 1] = \"Monday\";\n  Weekdays[Weekdays[\"Tuesday\"] = 2] = \"Tuesday\";\n  Weekdays[Weekdays[\"Wednesday\"] = 3] = \"Wednesday\";\n  Weekdays[Weekdays[\"Thursday\"] = 4] = \"Thursday\";\n  Weekdays[Weekdays[\"Friday\"] = 5] = \"Friday\";\n  Weekdays[Weekdays[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekdays = exports.Weekdays || (exports.Weekdays = {}));\n\nvar Months;\n\n(function (Months) {\n  Months[Months[\"January\"] = 0] = \"January\";\n  Months[Months[\"February\"] = 1] = \"February\";\n  Months[Months[\"March\"] = 2] = \"March\";\n  Months[Months[\"April\"] = 3] = \"April\";\n  Months[Months[\"May\"] = 4] = \"May\";\n  Months[Months[\"June\"] = 5] = \"June\";\n  Months[Months[\"July\"] = 6] = \"July\";\n  Months[Months[\"August\"] = 7] = \"August\";\n  Months[Months[\"September\"] = 8] = \"September\";\n  Months[Months[\"October\"] = 9] = \"October\";\n  Months[Months[\"November\"] = 10] = \"November\";\n  Months[Months[\"December\"] = 11] = \"December\";\n})(Months = exports.Months || (exports.Months = {}));\n\nvar TimeUnit;\n\n(function (TimeUnit) {\n  TimeUnit[TimeUnit[\"Second\"] = 1000] = \"Second\";\n  TimeUnit[TimeUnit[\"Minute\"] = 60000] = \"Minute\";\n  TimeUnit[TimeUnit[\"Hour\"] = 3600000] = \"Hour\";\n  TimeUnit[TimeUnit[\"Day\"] = 86400000] = \"Day\";\n  TimeUnit[TimeUnit[\"Week\"] = 604800000] = \"Week\";\n  TimeUnit[TimeUnit[\"Year\"] = 31536000000] = \"Year\";\n})(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));\n\nfunction getYearForRange(_a) {\n  var start = _a.start,\n      end = _a.end;\n\n  if (start) {\n    return start.getFullYear();\n  }\n\n  if (end) {\n    return end.getFullYear();\n  }\n\n  return new Date().getFullYear();\n}\n\nexports.getYearForRange = getYearForRange;\n\nfunction getMonthForRange(_a) {\n  var start = _a.start,\n      end = _a.end;\n\n  if (start) {\n    return start.getMonth();\n  }\n\n  if (end) {\n    return end.getMonth();\n  }\n\n  return new Date().getMonth();\n}\n\nexports.getMonthForRange = getMonthForRange;\n\nfunction abbreviationForWeekday(weekday) {\n  return Weekdays[weekday].substring(0, 2);\n}\n\nexports.abbreviationForWeekday = abbreviationForWeekday;\nvar WEEK_LENGTH = 7;\n\nfunction getWeeksForMonth(month, year, weekStartsOn) {\n  if (weekStartsOn === void 0) {\n    weekStartsOn = Weekdays.Sunday;\n  }\n\n  var firstOfMonth = new Date(year, month, 1);\n  var firstDayOfWeek = firstOfMonth.getDay();\n  var weeks = [[]];\n  var currentWeek = weeks[0];\n  var currentDate = firstOfMonth;\n  var orderedWeekday = getOrderedWeekdays(weekStartsOn);\n\n  for (var i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++) {\n    currentWeek.push(null);\n  }\n\n  while (currentDate.getMonth() === month) {\n    if (currentWeek.length === WEEK_LENGTH) {\n      currentWeek = [];\n      weeks.push(currentWeek);\n    }\n\n    currentWeek.push(currentDate);\n    currentDate = new Date(year, month, currentDate.getDate() + 1);\n  }\n\n  while (currentWeek.length < 7) {\n    currentWeek.push(null);\n  }\n\n  return weeks;\n}\n\nexports.getWeeksForMonth = getWeeksForMonth;\n\nfunction dateIsInRange(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  var start = range.start,\n      end = range.end;\n  return Boolean(start && day > start && end && day < end);\n}\n\nexports.dateIsInRange = dateIsInRange;\n\nfunction dateIsSelected(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  var start = range.start,\n      end = range.end;\n  return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));\n}\n\nexports.dateIsSelected = dateIsSelected;\n\nfunction isSameDay(day1, day2) {\n  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();\n}\n\nexports.isSameDay = isSameDay;\n\nfunction getDateDiff(resolution, date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return Math.floor((today.getTime() - date.getTime()) / resolution);\n}\n\nexports.getDateDiff = getDateDiff;\n\nfunction getNewRange(range, selected) {\n  if (range == null) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  var start = range.start,\n      end = range.end;\n\n  if (end && (isDateAfter(start, end) || isDateBefore(start, end))) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  if (start) {\n    if (isDateBefore(selected, start)) {\n      return {\n        start: selected,\n        end: selected\n      };\n    }\n\n    return {\n      start: start,\n      end: selected\n    };\n  }\n\n  if (end) {\n    if (isDateBefore(selected, end)) {\n      return {\n        start: selected,\n        end: end\n      };\n    }\n\n    return {\n      start: start || end,\n      end: selected\n    };\n  }\n\n  return {\n    start: selected,\n    end: selected\n  };\n}\n\nexports.getNewRange = getNewRange;\n\nfunction getNextDisplayMonth(month) {\n  if (Months[month] === Months[11]) {\n    return 0;\n  }\n\n  return month + 1;\n}\n\nexports.getNextDisplayMonth = getNextDisplayMonth;\n\nfunction getNextDisplayYear(month, year) {\n  if (Months[month] === Months[11]) {\n    return year + 1;\n  }\n\n  return year;\n}\n\nexports.getNextDisplayYear = getNextDisplayYear;\n\nfunction getPreviousDisplayMonth(month) {\n  if (Months[month] === Months[0]) {\n    return 11;\n  }\n\n  return month - 1;\n}\n\nexports.getPreviousDisplayMonth = getPreviousDisplayMonth;\n\nfunction getPreviousDisplayYear(month, year) {\n  if (Months[month] === Months[0]) {\n    return year - 1;\n  }\n\n  return year;\n}\n\nexports.getPreviousDisplayYear = getPreviousDisplayYear;\n\nfunction isDateAfter(date, dateToCompare) {\n  return date.getTime() > dateToCompare.getTime();\n}\n\nexports.isDateAfter = isDateAfter;\n\nfunction isDateBefore(date, dateToCompare) {\n  return date.getTime() < dateToCompare.getTime();\n}\n\nexports.isDateBefore = isDateBefore;\n\nfunction isLessThanOneMinuteAgo(date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return isDateBefore(date, today) && today.getTime() - date.getTime() < TimeUnit.Minute;\n}\n\nexports.isLessThanOneMinuteAgo = isLessThanOneMinuteAgo;\n\nfunction isLessThanOneHourAgo(date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return isDateBefore(date, today) && today.getTime() - date.getTime() < TimeUnit.Hour;\n}\n\nexports.isLessThanOneHourAgo = isLessThanOneHourAgo;\n\nfunction isLessThanOneDayAgo(date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return isDateBefore(date, today) && today.getTime() - date.getTime() < TimeUnit.Day;\n}\n\nexports.isLessThanOneDayAgo = isLessThanOneDayAgo;\n\nfunction isLessThanOneWeekAgo(date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return isDateBefore(date, today) && today.getTime() - date.getTime() < TimeUnit.Week;\n}\n\nexports.isLessThanOneWeekAgo = isLessThanOneWeekAgo;\n\nfunction isLessThanOneYearAgo(date, today) {\n  if (today === void 0) {\n    today = new Date();\n  }\n\n  return isDateBefore(date, today) && today.getTime() - date.getTime() < TimeUnit.Year;\n}\n\nexports.isLessThanOneYearAgo = isLessThanOneYearAgo;\n\nfunction isSameMonthAndYear(source, target) {\n  return source.getFullYear() === target.getFullYear() && source.getMonth() === target.getMonth();\n}\n\nexports.isSameMonthAndYear = isSameMonthAndYear;\n\nfunction isSameDate(source, target) {\n  return isSameMonthAndYear(source, target) && source.getDate() === target.getDate();\n}\n\nexports.isSameDate = isSameDate;\n\nfunction isToday(date) {\n  var today = new Date();\n  return isSameDate(today, date);\n}\n\nexports.isToday = isToday;\n\nfunction isYesterday(date) {\n  var yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return isSameDate(yesterday, date);\n}\n\nexports.isYesterday = isYesterday;\nvar WEEKDAYS = [Weekdays.Sunday, Weekdays.Monday, Weekdays.Tuesday, Weekdays.Wednesday, Weekdays.Thursday, Weekdays.Friday, Weekdays.Saturday];\n\nfunction getOrderedWeekdays(weekStartsOn) {\n  var weekDays = WEEKDAYS.slice();\n  var restOfDays = weekDays.splice(weekStartsOn);\n  return restOfDays.concat(weekDays);\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helper_1 = require(\"../../helper\");\n\nvar types_1 = require(\"../../types\");\n\nvar buttonHelper_1 = require(\"../../buttonHelper\");\n\nvar MENU_BUTTON_PROPS = {\n  group: types_1.Group.Menu,\n  subgroups: ['Navigation_Menu'],\n  type: types_1.ComponentType.Button\n};\nvar Action;\n\n(function (Action) {\n  Action[\"UPDATE\"] = \"UPDATE\";\n})(Action = exports.Action || (exports.Action = {}));\n\nvar ActionType;\n\n(function (ActionType) {\n  ActionType[\"UPDATE\"] = \"APP::MENU::NAVIGATION_MENU::UPDATE\";\n  ActionType[\"BUTTON_CLICK\"] = \"APP::MENU::NAVIGATION_MENU::BUTTON::CLICK\";\n  ActionType[\"BUTTON_UPDATE\"] = \"APP::MENU::NAVIGATION_MENU::BUTTON::UPDATE\";\n})(ActionType = exports.ActionType || (exports.ActionType = {}));\n\nfunction update(payload) {\n  return helper_1.actionWrapper({\n    payload: payload,\n    group: types_1.Group.Menu,\n    type: ActionType.UPDATE\n  });\n}\n\nexports.update = update;\n\nvar NavigationMenu =\n/** @class */\nfunction (_super) {\n  __extends(NavigationMenu, _super);\n\n  function NavigationMenu(app, options) {\n    var _this = _super.call(this, app, 'NavigationMenu', types_1.Group.Menu) || this;\n\n    _this.items = []; // Trigger 'update' on creation\n\n    _this.set(options);\n\n    return _this;\n  }\n\n  Object.defineProperty(NavigationMenu.prototype, \"options\", {\n    get: function () {\n      return {\n        items: this.itemsOptions,\n        active: this.activeOptions\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NavigationMenu.prototype, \"payload\", {\n    get: function () {\n      return __assign({}, this.options, {\n        active: this.active,\n        items: this.items,\n        id: this.id\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NavigationMenu.prototype.set = function (options, shouldUpdate) {\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var items = mergedOptions.items,\n        active = mergedOptions.active;\n    this.setItems(items);\n    this.activeOptions = active;\n    this.active = active && active.id;\n\n    if (shouldUpdate) {\n      this.dispatch(Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  NavigationMenu.prototype.dispatch = function (action) {\n    switch (action) {\n      case Action.UPDATE:\n        this.app.dispatch(update(this.payload));\n        break;\n    }\n\n    return this;\n  };\n\n  NavigationMenu.prototype.updateItems = function (newPayload) {\n    if (!this.items) {\n      return;\n    }\n\n    var itemToUpdate = this.items.find(function (action) {\n      return action.id === newPayload.id;\n    });\n\n    if (!itemToUpdate) {\n      return;\n    }\n\n    if (helper_1.updateActionFromPayload(itemToUpdate, newPayload)) {\n      this.dispatch(Action.UPDATE);\n    }\n  };\n\n  NavigationMenu.prototype.setItems = function (newOptions) {\n    var _this = this;\n\n    var newItems = newOptions || [];\n    var currentItems = this.itemsOptions || [];\n    this.itemsOptions = this.getUpdatedChildActions(newItems, currentItems);\n    this.items = this.itemsOptions ? this.itemsOptions.map(function (action) {\n      return buttonHelper_1.getSingleButton(_this, action, MENU_BUTTON_PROPS.subgroups, _this.updateItems);\n    }) : [];\n  };\n\n  return NavigationMenu;\n}(helper_1.ActionSetWithChildren);\n\nexports.NavigationMenu = NavigationMenu;\n\nfunction create(app, options) {\n  return new NavigationMenu(app, options);\n}\n\nexports.create = create;","map":null,"metadata":{},"sourceType":"script"}
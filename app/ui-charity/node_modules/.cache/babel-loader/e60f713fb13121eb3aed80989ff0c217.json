{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert a number or array of integers to a string of padded hex octets.\n */\n\nfunction asHex(value) {\n  return Array.from(value).map(function (i) {\n    return (\"00\" + i.toString(16)).slice(-2);\n  }).join('');\n}\n/**\n * Attempt to securely generate random bytes/\n */\n\n\nfunction getRandomBytes(size) {\n  // SPRNG\n  if (typeof Uint8Array === 'function' && typeof window === 'object' && window.crypto) {\n    var buffer = new Uint8Array(size);\n    var randomValues = window.crypto.getRandomValues(buffer);\n\n    if (randomValues) {\n      return randomValues;\n    }\n  } // Insecure random\n\n\n  return Array.from(new Array(size), function () {\n    return Math.random() * 255 | 0;\n  });\n}\n/**\n * Generate a RFC4122-compliant v4 UUID.\n *\n * @see http://www.ietf.org/rfc/rfc4122.txt\n */\n\n\nfunction generateUuid() {\n  var version = 64;\n  var clockSeqHiAndReserved = getRandomBytes(1);\n  var timeHiAndVersion = getRandomBytes(2);\n  clockSeqHiAndReserved[0] &= 63 | 128; // tslint:disable-next-line:binary-expression-operand-order\n\n  timeHiAndVersion[0] &= 15 | version;\n  return [asHex(getRandomBytes(4)), '-', asHex(getRandomBytes(2)), '-', asHex(timeHiAndVersion), '-', asHex(clockSeqHiAndReserved), asHex(getRandomBytes(1)), '-', asHex(getRandomBytes(6))].join('');\n}\n\nexports.generateUuid = generateUuid; // Default\n\nexports.default = generateUuid;","map":null,"metadata":{},"sourceType":"script"}
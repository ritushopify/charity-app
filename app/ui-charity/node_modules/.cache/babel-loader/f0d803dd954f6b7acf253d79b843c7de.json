{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Button_1 = require(\"../Button\");\n\nvar ButtonGroup_1 = require(\"../ButtonGroup\");\n\nvar buttonGroupHelper_1 = require(\"../buttonGroupHelper\");\n\nvar buttonHelper_1 = require(\"../buttonHelper\");\n\nvar helper_1 = require(\"../helper\");\n\nvar types_1 = require(\"../types\");\n\nvar types_2 = require(\"./types\");\n\nvar TITLEBAR_BUTTON_PROPS = {\n  group: types_1.Group.TitleBar,\n  subgroups: ['Buttons']\n};\nvar BREADCRUMB_BUTTON_PROPS = {\n  group: types_1.Group.TitleBar,\n  subgroups: ['Breadcrumbs'],\n  type: types_1.ComponentType.Button\n};\n\nfunction clickActionButton(id, payload) {\n  var type = types_1.ComponentType.Button;\n\n  var component = __assign({\n    id: id,\n    type: type\n  }, TITLEBAR_BUTTON_PROPS);\n\n  return Button_1.clickButton(types_1.Group.TitleBar, component, payload);\n}\n\nexports.clickActionButton = clickActionButton;\n\nfunction clickBreadcrumb(id, payload) {\n  var component = __assign({\n    id: id\n  }, BREADCRUMB_BUTTON_PROPS);\n\n  return Button_1.clickButton(types_1.Group.TitleBar, component, payload);\n}\n\nexports.clickBreadcrumb = clickBreadcrumb;\n\nfunction update(payload) {\n  return helper_1.actionWrapper({\n    payload: payload,\n    group: types_1.Group.TitleBar,\n    type: types_2.ActionType.UPDATE\n  });\n}\n\nexports.update = update;\n\nvar TitleBar =\n/** @class */\nfunction (_super) {\n  __extends(TitleBar, _super);\n\n  function TitleBar(app, options) {\n    var _this = _super.call(this, app, types_1.Group.TitleBar, types_1.Group.TitleBar) || this; // Trigger 'update' on creation\n\n\n    _this.set(options);\n\n    return _this;\n  }\n\n  Object.defineProperty(TitleBar.prototype, \"buttons\", {\n    get: function () {\n      if (!this.primary && !this.secondary) {\n        return undefined;\n      }\n\n      return {\n        primary: this.primary,\n        secondary: this.secondary\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TitleBar.prototype, \"buttonsOptions\", {\n    get: function () {\n      if (!this.primaryOptions && !this.secondaryOptions) {\n        return undefined;\n      }\n\n      return {\n        primary: this.primaryOptions,\n        secondary: this.secondaryOptions\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TitleBar.prototype, \"options\", {\n    get: function () {\n      return {\n        breadcrumbs: this.breadcrumbsOption,\n        buttons: this.buttonsOptions,\n        title: this.title\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TitleBar.prototype, \"payload\", {\n    get: function () {\n      return __assign({}, this.options, {\n        breadcrumbs: this.breadcrumb,\n        buttons: this.buttons,\n        id: this.id\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  TitleBar.prototype.set = function (options, shouldUpdate) {\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var title = mergedOptions.title,\n        buttons = mergedOptions.buttons,\n        breadcrumbs = mergedOptions.breadcrumbs;\n    this.title = title;\n    this.setBreadcrumbs(breadcrumbs);\n    this.setPrimaryButton(buttons ? buttons.primary : undefined);\n    this.setSecondaryButton(buttons ? buttons.secondary : undefined);\n\n    if (shouldUpdate) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  TitleBar.prototype.dispatch = function (action) {\n    switch (action) {\n      case types_2.Action.UPDATE:\n        this.app.dispatch(update(this.payload));\n        break;\n    }\n\n    return this;\n  };\n\n  TitleBar.prototype.getButton = function (button, subgroups, updateCb) {\n    if (button instanceof ButtonGroup_1.ButtonGroup) {\n      return buttonGroupHelper_1.getGroupedButton(this, button, subgroups, updateCb);\n    }\n\n    return buttonHelper_1.getSingleButton(this, button, subgroups, updateCb);\n  };\n\n  TitleBar.prototype.updatePrimaryButton = function (newPayload) {\n    if (!this.primary) {\n      return;\n    }\n\n    if (helper_1.updateActionFromPayload(this.primary, newPayload)) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n  };\n\n  TitleBar.prototype.updateSecondaryButtons = function (newPayload) {\n    if (!this.secondary) {\n      return;\n    }\n\n    var buttonToUpdate = this.secondary.find(function (action) {\n      return action.id === newPayload.id;\n    });\n\n    if (!buttonToUpdate) {\n      return;\n    }\n\n    var updated = false;\n\n    if (ButtonGroup_1.isGroupedButtonPayload(newPayload)) {\n      updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);\n    } else {\n      updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);\n    }\n\n    if (updated) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n  };\n\n  TitleBar.prototype.updateBreadcrumbButton = function (newPayload) {\n    if (!this.breadcrumb) {\n      return;\n    }\n\n    if (helper_1.updateActionFromPayload(this.breadcrumb, newPayload)) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n  };\n\n  TitleBar.prototype.setPrimaryButton = function (newOptions) {\n    this.primaryOptions = this.getChildButton(newOptions, this.primaryOptions);\n    this.primary = this.primaryOptions ? this.getButton(this.primaryOptions, TITLEBAR_BUTTON_PROPS.subgroups, this.updatePrimaryButton) : undefined;\n  };\n\n  TitleBar.prototype.setSecondaryButton = function (newOptions) {\n    var _this = this;\n\n    var newButtons = newOptions || [];\n    var currentButtons = this.secondaryOptions || [];\n    this.secondaryOptions = this.getUpdatedChildActions(newButtons, currentButtons);\n    this.secondary = this.secondaryOptions ? this.secondaryOptions.map(function (action) {\n      return _this.getButton(action, TITLEBAR_BUTTON_PROPS.subgroups, _this.updateSecondaryButtons);\n    }) : undefined;\n  };\n\n  TitleBar.prototype.setBreadcrumbs = function (breadcrumb) {\n    this.breadcrumbsOption = this.getChildButton(breadcrumb, this.breadcrumbsOption);\n    this.breadcrumb = this.breadcrumbsOption ? this.getButton(this.breadcrumbsOption, BREADCRUMB_BUTTON_PROPS.subgroups, this.updateBreadcrumbButton) : undefined;\n  };\n\n  TitleBar.prototype.getChildButton = function (newAction, currentAction) {\n    var newButtons = newAction ? [newAction] : [];\n    var currentButtons = currentAction ? [currentAction] : [];\n    var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);\n    return updatedButton ? updatedButton[0] : undefined;\n  };\n\n  return TitleBar;\n}(helper_1.ActionSetWithChildren);\n\nexports.TitleBar = TitleBar;\n\nfunction create(app, options) {\n  return new TitleBar(app, options);\n}\n\nexports.create = create;","map":null,"metadata":{},"sourceType":"script"}
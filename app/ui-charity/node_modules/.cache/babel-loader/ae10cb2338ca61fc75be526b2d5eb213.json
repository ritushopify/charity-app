{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction mergeProps(obj, newObj) {\n  if (newObj === undefined) {\n    return undefined;\n  } // If setting to a different prototype or a non-object or non-array, don't merge any props\n\n\n  if (typeof obj === 'undefined' || !Object.getPrototypeOf(obj).isPrototypeOf(newObj) || newObj.constructor.name !== 'Object' && newObj.constructor.name !== 'Array') {\n    return newObj;\n  }\n\n  var clone = {};\n  Object.keys(newObj).forEach(function (key) {\n    var exists = obj.hasOwnProperty(key);\n\n    if (!exists) {\n      clone[key] = newObj[key];\n    } else {\n      if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n        clone[key] = mergeProps(obj[key], newObj[key]);\n      } else {\n        clone[key] = newObj[key];\n      }\n    }\n  }); // Copy old props that are not present in new object only if this is a simple object\n\n  Object.keys(obj).forEach(function (key) {\n    var exists = newObj.hasOwnProperty(key);\n\n    if (!exists) {\n      clone[key] = obj[key];\n    }\n  }); // Set prototype of cloned object to match original\n\n  Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));\n  return clone;\n}\n\nexports.default = mergeProps;","map":null,"metadata":{},"sourceType":"script"}
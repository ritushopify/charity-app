{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @internal\n */\n\nvar PermissionType;\n\n(function (PermissionType) {\n  PermissionType[\"Dispatch\"] = \"Dispatch\";\n  PermissionType[\"Subscribe\"] = \"Subscribe\";\n})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));\n/**\n * @internal\n */\n\n\nvar MessageType;\n\n(function (MessageType) {\n  MessageType[\"GetState\"] = \"getState\";\n  MessageType[\"Dispatch\"] = \"dispatch\";\n  MessageType[\"Subscribe\"] = \"subscribe\";\n  MessageType[\"Unsubscribe\"] = \"unsubscribe\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n/**\n *\n * There are two types of hooks: `LifecycleHook.DispatchAction` and `LifecycleHook.UpdateAction`.\n *\n * @remarks\n * `DispatchAction` hooks are run when an action is dispatched with the `.dispatch()` function:\n *\n * ```js\n * const toastNotice = Toast.create(app, {message: 'Product saved'});\n * toastNotice.dispatch(Toast.Action.SHOW);\n * ```\n *\n * `UpdateAction` hooks are run when an action is updated, using the `.set()` function:\n *\n * ```js\n * toastNotice.set({message: 'Product could not be saved', isError: true});\n * ```\n *\n * @public\n */\n\n\nvar LifecycleHook;\n\n(function (LifecycleHook) {\n  LifecycleHook[\"UpdateAction\"] = \"UpdateAction\";\n  LifecycleHook[\"DispatchAction\"] = \"DispatchAction\";\n})(LifecycleHook = exports.LifecycleHook || (exports.LifecycleHook = {}));","map":null,"metadata":{},"sourceType":"script"}
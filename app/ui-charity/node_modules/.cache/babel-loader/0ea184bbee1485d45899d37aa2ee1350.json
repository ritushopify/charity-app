{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar buttonHelper_1 = require(\"../buttonHelper\");\n\nvar helper_1 = require(\"../helper\");\n\nvar types_1 = require(\"../types\");\n\nvar Button_1 = require(\"../Button\");\n\nvar types_2 = require(\"./types\");\n\nvar FOOTER_BUTTON_PROPS = {\n  group: types_1.Group.Modal,\n  subgroups: ['Footer'],\n  type: types_1.ComponentType.Button\n};\n\nfunction openModal(modalPayload) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Modal,\n    payload: modalPayload,\n    type: types_2.ActionType.OPEN\n  });\n}\n\nexports.openModal = openModal;\n\nfunction closeModal(modalClosePayload) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Modal,\n    payload: modalClosePayload,\n    type: types_2.ActionType.CLOSE\n  });\n}\n\nexports.closeModal = closeModal;\n/**\n * Action creator for modal update size action\n * @internal\n */\n\nfunction updateModalSize(updateSizePayload) {\n  return helper_1.actionWrapper({\n    group: types_1.Group.Modal,\n    payload: updateSizePayload,\n    type: types_2.ActionType.UPDATE_SIZE\n  });\n}\n\nexports.updateModalSize = updateModalSize;\n\nfunction clickFooterButton(id, payload) {\n  var component = __assign({\n    id: id\n  }, FOOTER_BUTTON_PROPS);\n\n  return Button_1.clickButton(types_1.Group.Modal, component, payload);\n}\n\nexports.clickFooterButton = clickFooterButton;\n\nfunction update(payload) {\n  return helper_1.actionWrapper({\n    payload: payload,\n    group: types_1.Group.Modal,\n    type: types_2.ActionType.UPDATE\n  });\n}\n\nexports.update = update;\n\nfunction isIframeModal(options) {\n  return typeof options.url === 'string' || typeof options.path === 'string';\n}\n\nexports.isIframeModal = isIframeModal;\n\nfunction isMessageModal(options) {\n  return typeof options.message === 'string';\n}\n\nexports.isMessageModal = isMessageModal;\n\nvar Modal =\n/** @class */\nfunction (_super) {\n  __extends(Modal, _super);\n\n  function Modal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.size = types_2.Size.Small;\n    return _this;\n  }\n\n  Object.defineProperty(Modal.prototype, \"footer\", {\n    get: function () {\n      if (!this.footerPrimary && !this.footerSecondary) {\n        return undefined;\n      }\n\n      return {\n        buttons: {\n          primary: this.footerPrimary,\n          secondary: this.footerSecondary\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Modal.prototype, \"footerOptions\", {\n    get: function () {\n      if (!this.footerPrimaryOptions && !this.footerSecondaryOptions) {\n        return undefined;\n      }\n\n      return {\n        buttons: {\n          primary: this.footerPrimaryOptions,\n          secondary: this.footerSecondaryOptions\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Modal.prototype.close = function () {\n    this.app.dispatch(closeModal({\n      id: this.id\n    }));\n  };\n\n  Modal.prototype.setFooterPrimaryButton = function (newOptions, updateCb) {\n    var _this = this;\n\n    var subgroups = FOOTER_BUTTON_PROPS.subgroups;\n    this.footerPrimaryOptions = this.getChildButton(newOptions, this.footerPrimaryOptions);\n    this.footerPrimary = this.footerPrimaryOptions ? buttonHelper_1.getSingleButton(this, this.footerPrimaryOptions, subgroups, function (newPayload) {\n      _this.updatePrimaryFooterButton(newPayload, updateCb);\n    }) : undefined;\n  };\n\n  Modal.prototype.setFooterSecondaryButtons = function (newOptions, updateCb) {\n    var _this = this;\n\n    var subgroups = FOOTER_BUTTON_PROPS.subgroups;\n    var newButtons = newOptions || [];\n    var currentOptions = this.footerOptions && this.footerOptions.buttons.secondary || [];\n    this.footerSecondaryOptions = this.getUpdatedChildActions(newButtons, currentOptions);\n    this.footerSecondary = this.footerSecondaryOptions ? this.footerSecondaryOptions.map(function (action) {\n      return buttonHelper_1.getSingleButton(_this, action, subgroups, function (newPayload) {\n        _this.updateSecondaryFooterButton(newPayload, updateCb);\n      });\n    }) : undefined;\n  };\n\n  Modal.prototype.getChildButton = function (newAction, currentAction) {\n    var newButtons = newAction ? [newAction] : [];\n    var currentButtons = currentAction ? [currentAction] : [];\n    var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);\n    return updatedButton ? updatedButton[0] : undefined;\n  };\n\n  Modal.prototype.updatePrimaryFooterButton = function (newPayload, updateCb) {\n    if (!this.footer || !this.footer.buttons.primary) {\n      return;\n    }\n\n    if (helper_1.updateActionFromPayload(this.footer.buttons.primary, newPayload)) {\n      updateCb();\n    }\n  };\n\n  Modal.prototype.updateSecondaryFooterButton = function (newPayload, updateCb) {\n    if (!this.footer || !this.footer.buttons || !this.footer.buttons.secondary) {\n      return;\n    }\n\n    var updated;\n\n    for (var _i = 0, _a = this.footer.buttons.secondary; _i < _a.length; _i++) {\n      var action = _a[_i];\n      updated = helper_1.updateActionFromPayload(action, newPayload);\n\n      if (updated) {\n        break;\n      }\n    }\n\n    if (updated) {\n      updateCb();\n    }\n  };\n\n  return Modal;\n}(helper_1.ActionSetWithChildren);\n\nexports.Modal = Modal;\n\nvar ModalMessage =\n/** @class */\nfunction (_super) {\n  __extends(ModalMessage, _super);\n\n  function ModalMessage(app, options) {\n    var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;\n\n    _this.set(options, false);\n\n    return _this;\n  }\n\n  Object.defineProperty(ModalMessage.prototype, \"payload\", {\n    get: function () {\n      return __assign({}, this.options, {\n        footer: this.footer,\n        id: this.id\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModalMessage.prototype, \"options\", {\n    get: function () {\n      return {\n        footer: this.footerOptions,\n        message: this.message,\n        size: this.size,\n        title: this.title\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ModalMessage.prototype.set = function (options, shouldUpdate) {\n    var _this = this;\n\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var title = mergedOptions.title,\n        footer = mergedOptions.footer,\n        message = mergedOptions.message,\n        size = mergedOptions.size;\n    this.title = title;\n    this.message = message;\n    this.size = size;\n    this.setFooterPrimaryButton(footer ? footer.buttons.primary : undefined, function () {\n      _this.dispatch(types_2.Action.UPDATE);\n    });\n    this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : undefined, function () {\n      _this.dispatch(types_2.Action.UPDATE);\n    });\n\n    if (shouldUpdate) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  ModalMessage.prototype.dispatch = function (action) {\n    switch (action) {\n      case types_2.Action.OPEN:\n        this.app.dispatch(openModal(this.payload));\n        break;\n\n      case types_2.Action.CLOSE:\n        this.close();\n        break;\n\n      case types_2.Action.UPDATE:\n        this.app.dispatch(update(this.payload));\n        break;\n    }\n\n    return this;\n  };\n\n  return ModalMessage;\n}(Modal);\n\nexports.ModalMessage = ModalMessage;\n\nvar ModalIframe =\n/** @class */\nfunction (_super) {\n  __extends(ModalIframe, _super);\n\n  function ModalIframe(app, options) {\n    var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;\n\n    _this.set(options, false);\n\n    return _this;\n  }\n\n  Object.defineProperty(ModalIframe.prototype, \"payload\", {\n    get: function () {\n      return __assign({}, this.options, {\n        footer: this.footer,\n        id: this.id\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModalIframe.prototype, \"options\", {\n    get: function () {\n      return {\n        footer: this.footerOptions,\n        path: this.path,\n        size: this.size,\n        title: this.title,\n        url: this.url\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ModalIframe.prototype.set = function (options, shouldUpdate) {\n    var _this = this;\n\n    if (shouldUpdate === void 0) {\n      shouldUpdate = true;\n    }\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var title = mergedOptions.title,\n        footer = mergedOptions.footer,\n        path = mergedOptions.path,\n        url = mergedOptions.url,\n        size = mergedOptions.size;\n    this.title = title;\n    this.url = url;\n    this.path = path;\n    this.size = size;\n    this.setFooterPrimaryButton(footer ? footer.buttons.primary : undefined, function () {\n      _this.dispatch(types_2.Action.UPDATE);\n    });\n    this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : undefined, function () {\n      _this.dispatch(types_2.Action.UPDATE);\n    });\n\n    if (shouldUpdate) {\n      this.dispatch(types_2.Action.UPDATE);\n    }\n\n    return this;\n  };\n\n  ModalIframe.prototype.dispatch = function (action) {\n    switch (action) {\n      case types_2.Action.OPEN:\n        this.app.dispatch(openModal(this.payload));\n        break;\n\n      case types_2.Action.CLOSE:\n        this.close();\n        break;\n\n      case types_2.Action.UPDATE:\n        this.app.dispatch(update(this.payload));\n        break;\n    }\n\n    return this;\n  };\n\n  return ModalIframe;\n}(Modal);\n\nexports.ModalIframe = ModalIframe;\n\nexports.create = function (app, options) {\n  if (isIframeModal(options)) {\n    return new ModalIframe(app, options);\n  }\n\n  return new ModalMessage(app, options);\n};","map":null,"metadata":{},"sourceType":"script"}
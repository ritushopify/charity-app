{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar type_validate_1 = require(\"../type-validate\");\n\nvar utils_1 = require(\"../utils\");\n\nvar actions_1 = require(\"../../actions\");\n\nvar Link_1 = require(\"../../actions/Link\");\n\nexports.ActionType = Link_1.ActionType;\n\nvar navigation_1 = require(\"./navigation\");\n\nexports.linkSchema = type_validate_1.matchesObject({\n  label: type_validate_1.matchesString()\n});\nexports.linkSchemaWithId = type_validate_1.composeSchemas(type_validate_1.matchesObject({\n  id: type_validate_1.matchesString()\n}), exports.linkSchema);\n\nfunction allowString(validator) {\n  return function (value) {\n    if (typeof value === 'string') {\n      return undefined;\n    }\n\n    return validator(value);\n  };\n}\n\nfunction getDestinationSchema(props) {\n  if (!props) {\n    return function () {\n      return undefined;\n    };\n  }\n\n  var newContextSchema = type_validate_1.matchesObject({\n    newContext: type_validate_1.makeOptional(type_validate_1.matchesBoolean())\n  });\n  var schema;\n\n  switch (props.redirectType) {\n    case actions_1.Link.RedirectType.ADMIN_PATH:\n      schema = allowString(type_validate_1.composeSchemas(utils_1.relativePathSchema, newContextSchema));\n      break;\n\n    case actions_1.Link.RedirectType.ADMIN_SECTION:\n      schema = type_validate_1.composeSchemas(navigation_1.getSectionSchema(props.destination), newContextSchema);\n      break;\n\n    case actions_1.Link.RedirectType.REMOTE:\n      schema = allowString(type_validate_1.composeSchemas(type_validate_1.matchesObject({\n        url: type_validate_1.composeSchemas(type_validate_1.matchesString(), function (value) {\n          return navigation_1.matchesAbsolutePath(value);\n        })\n      }), newContextSchema));\n      break;\n\n    case actions_1.Link.RedirectType.APP:\n    default:\n      schema = allowString(utils_1.relativePathSchema);\n      break;\n  }\n\n  return schema;\n}\n\nfunction getLinkSchema(props, isPayload) {\n  if (isPayload === void 0) {\n    isPayload = false;\n  }\n\n  var baseLinkSchema = isPayload ? exports.linkSchemaWithId : exports.linkSchema;\n  var destinationSchema = type_validate_1.matchesObject({\n    redirectType: type_validate_1.matchesEnum(actions_1.Redirect.Action),\n    destination: getDestinationSchema(props)\n  });\n  return type_validate_1.composeSchemas(baseLinkSchema, destinationSchema);\n}\n\nfunction validateProps(props) {\n  return type_validate_1.validate(props, getLinkSchema(props));\n}\n\nexports.validateProps = validateProps;\n\nfunction validateAction(action) {\n  return type_validate_1.validate(action, utils_1.createActionValidator(actions_1.Link.ActionType, getLinkSchema(action.payload, true), true, true));\n}\n\nexports.validateAction = validateAction;","map":null,"metadata":{},"sourceType":"script"}
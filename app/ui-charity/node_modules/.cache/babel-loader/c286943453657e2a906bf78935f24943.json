{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar client_1 = require(\"../client\");\n\nvar actions_1 = require(\"../actions\");\n\nvar Error_1 = require(\"../actions/Error\");\n\nvar actions_2 = require(\"./actions\");\n\nvar type_validate_1 = require(\"./type-validate\");\n\nvar utils_1 = require(\"./utils\");\n\nvar helper_1 = require(\"../actions/helper\");\n\nfunction updateValidator(localOrigin, group, options) {\n  switch (group) {\n    case actions_1.Group.Button:\n      return actions_2.Button.validateProps(options);\n\n    case actions_1.Group.ButtonGroup:\n      return actions_2.ButtonGroup.validateProps(options);\n\n    case actions_1.Group.Modal:\n      return actions_2.Modal.validateProps(options, localOrigin);\n\n    case actions_1.Group.Menu:\n      return actions_2.Menu.validateProps(options);\n\n    case actions_1.Group.Link:\n      return actions_2.Link.validateProps(options);\n\n    case actions_1.Group.TitleBar:\n      return actions_2.TitleBar.validateProps(options);\n\n    case actions_1.Group.ResourcePicker:\n      return actions_2.ResourcePicker.validateProps(options);\n\n    case actions_1.Group.Toast:\n      return actions_2.Toast.validateProps(options);\n\n    case actions_1.Group.ContextualSaveBar:\n      return actions_2.ContextualSaveBar.validateProps(options);\n  }\n}\n\nfunction dispatchPayloadValidator(action, localOrigin) {\n  switch (action.group) {\n    case actions_1.Group.Button:\n      return actions_2.Button.validateAction(action);\n\n    case actions_1.Group.ButtonGroup:\n      return actions_2.ButtonGroup.validateAction(action);\n\n    case actions_1.Group.Modal:\n      return actions_2.Modal.validateAction(action, localOrigin);\n\n    case actions_1.Group.Menu:\n      return actions_2.Menu.validateAction(action);\n\n    case actions_1.Group.TitleBar:\n      return actions_2.TitleBar.validateAction(action);\n\n    case actions_1.Group.ResourcePicker:\n      return actions_2.ResourcePicker.validateAction(action);\n\n    case actions_1.Group.Loading:\n      return actions_2.Loading.validateAction(action);\n\n    case actions_1.Group.Toast:\n      return actions_2.Toast.validateAction(action);\n\n    case actions_1.Group.Cart:\n      return actions_2.Cart.validateAction(action);\n\n    case actions_1.Group.Navigation:\n      return actions_2.Navigation.validateAction(action);\n\n    case actions_1.Group.Print:\n      return actions_2.Print.validateAction(action);\n\n    case actions_1.Group.Scanner:\n      return actions_2.Scanner.validateAction(action);\n\n    case actions_1.Group.Fullscreen:\n      return actions_2.Fullscreen.validateAction(action);\n\n    case actions_1.Group.ContextualSaveBar:\n      return actions_2.ContextualSaveBar.validateAction(action);\n\n    case actions_1.Group.Link:\n      return actions_2.Link.validateAction(action);\n  }\n}\n\nfunction dispatchValidator(action, origin) {\n  var errors = type_validate_1.validate(action, type_validate_1.matchesObject({\n    group: type_validate_1.matchesEnum(actions_1.Group, {\n      message: function (_, value) {\n        return \"Unknown or unsupported action group `\" + value + \"`\";\n      }\n    }),\n    version: type_validate_1.matchesString()\n  }));\n\n  if (errors) {\n    return Error_1.invalidAction(action, utils_1.actionMessage(errors));\n  }\n\n  var payloadErrors = dispatchPayloadValidator(action, origin);\n  return payloadErrors ? Error_1.invalidPayload(action, utils_1.actionMessage(payloadErrors)) : action;\n}\n\nexports.connectValidatorToUpdateHook = function (next) {\n  return function (options) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    } // The group should be staticly set to the default initial group as certain components\n    // (ex. Button and ButtonGroup) can be dynamically grouped under a new group (ex. TitleBar)\n    // We accept partial options so the validator should be called on merged new and old options\n\n\n    var mergedOptions = helper_1.getMergedProps(this.options, options);\n    var errors = updateValidator(this.app.localOrigin, this.defaultGroup, mergedOptions);\n\n    if (errors) {\n      throw Error_1.fromAction(utils_1.actionMessage(errors), Error_1.ActionType.INVALID_OPTIONS);\n    }\n\n    return next.apply(void 0, [options].concat(args));\n  };\n};\n\nexports.connectValidatorToDispatchHook = function (next) {\n  return function (action) {\n    var finalAction = dispatchValidator(action, this.localOrigin);\n    return next(finalAction);\n  };\n};\n\nexports.validatorMiddleware = function (hooks) {\n  hooks.set(client_1.LifecycleHook.UpdateAction, exports.connectValidatorToUpdateHook);\n  hooks.set(client_1.LifecycleHook.DispatchAction, exports.connectValidatorToDispatchHook);\n};","map":null,"metadata":{},"sourceType":"script"}